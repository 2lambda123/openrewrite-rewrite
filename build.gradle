import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.netflix.nebula:nebula-publishing-plugin:14.1.1'
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:5.0.1'
        classpath 'com.netflix.nebula:gradle-netflixoss-project-plugin:8.5.0'
        classpath 'org.apache.ant:ant:1.9.4' // otherwise shadowJar blows up in subproject
        classpath 'gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.1'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.61'
    }
}

plugins {
    id "nebula.release" version "13.2.1"
}

allprojects {
    group = 'org.gradle.rewrite'
    description 'Pluggable and distributed refactoring tool'
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'nebula.maven-resolved-dependencies'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'nebula.optional-base'
    apply plugin: 'org.jetbrains.kotlin.jvm'

    repositories {
        mavenCentral()
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok:latest.release'
        annotationProcessor 'org.projectlombok:lombok:latest.release'

        testImplementation("org.junit.jupiter:junit-jupiter-api:latest.release")
        testImplementation("org.junit.jupiter:junit-jupiter-params:latest.release")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:latest.release")

        testImplementation 'org.jetbrains.kotlin:kotlin-reflect'
        testImplementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

        testImplementation("org.assertj:assertj-core:latest.release")

        testRuntimeOnly 'ch.qos.logback:logback-classic:1.0.13'
    }

    test {
        useJUnitPlatform()
        jvmArgs = ["-XX:+UnlockDiagnosticVMOptions", "-XX:+ShowHiddenFrames"]
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    tasks.withType(KotlinCompile).configureEach {
        kotlinOptions {
            jvmTarget = '1.8'
        }
    }

    configurations.all {
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                pom.withXml {
                    asNode().dependencies.dependency.scope.each {
                        it.value = 'compile'
                    }
                }
            }
        }

        repositories {
            maven {
                name = "GradleBuildInternalSnapshots"
                url = URI.create("https://repo.gradle.org/gradle/libs-snapshots-local")
                credentials {
                    username = project.findProperty("artifactoryUsername")
                    password = project.findProperty("artifactoryPassword")
                }
            }
        }
    }



    license {
        header = file('../gradle/licenseHeader.txt')
        exclude '**/*.tokens'
        exclude '**/grammar/*.java'
        exclude '**/lombok.config'
        mapping('kt', 'SLASHSTAR_STYLE')
        mapping('java', 'SLASHSTAR_STYLE')
        sourceSets = project.sourceSets
        strictCheck = true
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        skipExistingHeaders = true
    }
}