plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
}

// run manually with -x compileKotlin when you need to regenerate
task generateAntlrSources(type: JavaExec) {
    main = 'org.antlr.v4.Tool'

    args = [
            '-o', 'src/main/java/com/netflix/rewrite/internal/grammar',
            '-package', 'com.netflix.rewrite.internal.grammar',
            '-visitor'
    ] + project.fileTree(dir: 'src/main/antlr', include: '**/*.g4').collect { it.path }

    classpath = sourceSets.main.runtimeClasspath
}

dependencies {
    implementation 'org.eclipse.jgit:org.eclipse.jgit:4.4.1.201607150455-r'
    implementation 'org.antlr:antlr4:4.7'

    implementation 'eu.infomas:annotation-detector:latest.release'
    implementation 'org.slf4j:slf4j-api:1.7.+'
    implementation 'commons-lang:commons-lang:2.6'

    compileOnly 'org.projectlombok:lombok:1.18.10'
    annotationProcessor 'org.projectlombok:lombok:1.18.10'

    implementation 'com.koloboke:koloboke-api-jdk8:latest.release'
    implementation 'com.koloboke:koloboke-impl-jdk8:latest.release'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.2', optional

    // To avoid "warning: unknown enum constant JsonTypeInfo$As.PROPERTY" type warnings
    // when using rewrite but not needing serialization functionality. We pick an old version
    // of this library so that if the user depends on an older version of Jackson, we don't 
    // inadvertently upgrade their version.
    implementation'com.fasterxml.jackson.core:jackson-annotations:2.0.0'

    implementation'org.ow2.asm:asm:latest.release'
    implementation'org.ow2.asm:asm-util:latest.release'

    implementation 'com.google.code.findbugs:jsr305:latest.release'

    testImplementation 'org.jetbrains.kotlin:kotlin-reflect'
    testImplementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    testImplementation 'junit:junit:4.+'
    testImplementation 'ch.qos.logback:logback-classic:1.0.13'
    testImplementation 'org.assertj:assertj-core:latest.release'
}

tasks.withType(Javadoc) {
    // generated ANTLR sources violate doclint
    options.addStringOption('Xdoclint:none', '-quiet')
}

compileJava {
    options.setFork(true)
    options.forkOptions.executable = "javac"
    options.compilerArgs.addAll([
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED',
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED'
    ])
}

javadoc {
    exclude '**/Parser**'
}